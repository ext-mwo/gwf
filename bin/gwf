#!/bin/bash

# GWF - git work flow
# (C) Michael Wojciechowski-Jensen

ARG="${1}"

if [ -z "${GIT_EDITOR}" ]; then
  export GIT_EDITOR='nano -z'
  echo "Editor set to ${GIT_EDITOR}"
fi

GITNAME=$(basename -s .git $(git config --get remote.origin.url)) || GITNAME=""

if [ -z "${ARG}" ]; then
  echo "What workflow do you want to execute?"
  echo "Possible workflows:"
  echo "cr <branch>  - create work branch."
  echo "pub          - pull followed by rebase."
  echo "th           - pull followed by rebase, take their version."
  echo "pr           - push ready branch."
  echo "am           - ammend last commit, edit message."
  echo "ac           - add modified files with commit message (work branch name)."
  echo "reb          - list ten most recent branches."
  echo "lbr          - push local branch to remote server."
  echo "ec <message> - add empty commit with <message>."
  echo ""
  echo "More advanced usecases:"
  echo "cp <branch> <id>"
  echo "  Create <branch>. Cherry pick <id> and commiot it."
  echo "check"
  echo "  Execute \${REPO_NAME}-check.sh script to execute any often executed checks prior to pushing."
  echo "  \{REPO_NAME} is the name of the gif repository in which this tool is executed."
  if [ ! -z "${GITNAME}" ]; then
    echo "  For this repository the script is located in ${HOME}/.gwf/${GITNAME}-check.sh" 
  fi
  exit 1
fi

# TODO: Set this based on args:
VERBOSE=1

verbose () {
  if [ "${VERBOSE}" -eq "1" ]; then
    echo "${1}"
  fi
}

STATUS=1

if [ "${ARG}" == "pub" ]; then
  verbose "Handling pull/rebase"
  verbose "Executing git pull"
  git pull --no-edit && \
  verbose "Executing git rebase" && \
  git rebase && \
  STATUS=0
  verbose "Finished with status ${STATUS}"
  exit ${STATUS}
elif [ "${ARG}" == "th" ]; then
  verbose "Handling pull/rebase"
  verbose "Executing git pull"
  git pull --no-edit && \
  verbose "Executing git rebase" && \
  git rebase -Xtheirs && \
  STATUS=0
  verbose "Finished with status ${STATUS}"
  exit ${STATUS}
elif [ "${ARG}" == "reb" ]; then
  git branch --sort=committerdate|head -n10 && STATUS=0
  exit ${STATUS}
elif [ "${ARG}" == "ec" ]; then
  MESSAGE="$2"
  verbose "Adding empty commit with message ${MESSAGE}"
  if [ -z "${MESSAGE}" ]
    exit ${STATUS}
  fi
  git commit --allow-empty -m"${MESSAGE}" && STATUS=0
  exit ${STATUS}
else
  verbose "Unknown flow"
  exit 1
fi

exit 0
